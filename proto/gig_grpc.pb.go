// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: gig.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GigService_CreateGig_FullMethodName             = "/gig.GigService/CreateGig"
	GigService_GetGigsByFreelancerID_FullMethodName = "/gig.GigService/GetGigsByFreelancerID"
	GigService_UpdateGigByID_FullMethodName         = "/gig.GigService/UpdateGigByID"
	GigService_DeleteGigByID_FullMethodName         = "/gig.GigService/DeleteGigByID"
	GigService_CreateOrder_FullMethodName           = "/gig.GigService/CreateOrder"
	GigService_GetOrders_FullMethodName             = "/gig.GigService/GetOrders"
	GigService_RequestQuote_FullMethodName          = "/gig.GigService/RequestQuote"
	GigService_GetAllQuotes_FullMethodName          = "/gig.GigService/GetAllQuotes"
	GigService_CreateOffer_FullMethodName           = "/gig.GigService/CreateOffer"
	GigService_GetAllOffers_FullMethodName          = "/gig.GigService/GetAllOffers"
	GigService_CreateOfferOrder_FullMethodName      = "/gig.GigService/CreateOfferOrder"
	GigService_UpdateOrderStatus_FullMethodName     = "/gig.GigService/UpdateOrderStatus"
	GigService_GetAllRequest_FullMethodName         = "/gig.GigService/GetAllRequest"
	GigService_AcceptRequest_FullMethodName         = "/gig.GigService/AcceptRequest"
	GigService_RejectRequest_FullMethodName         = "/gig.GigService/RejectRequest"
	GigService_AdminOrderController_FullMethodName  = "/gig.GigService/AdminOrderController"
	GigService_AdOrderRefund_FullMethodName         = "/gig.GigService/AdOrderRefund"
	GigService_GetAllOrders_FullMethodName          = "/gig.GigService/GetAllOrders"
	GigService_GetOrderByID_FullMethodName          = "/gig.GigService/GetOrderByID"
	GigService_ClientStatutUpdate_FullMethodName    = "/gig.GigService/ClientStatutUpdate"
	GigService_GetAllGig_FullMethodName             = "/gig.GigService/GetAllGig"
	GigService_GetGigByID_FullMethodName            = "/gig.GigService/GetGigByID"
)

// GigServiceClient is the client API for GigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GigServiceClient interface {
	CreateGig(ctx context.Context, in *CreateGigReq, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetGigsByFreelancerID(ctx context.Context, in *GetGigsByFreelancerIDRequest, opts ...grpc.CallOption) (*GetGigsByFreelancerIDResponse, error)
	UpdateGigByID(ctx context.Context, in *UpdateGigRequest, opts ...grpc.CallOption) (*CommonGigRes, error)
	DeleteGigByID(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	GetOrders(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderRes, error)
	RequestQuote(ctx context.Context, in *QuoteReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	GetAllQuotes(ctx context.Context, in *GetAllQuoteReq, opts ...grpc.CallOption) (*GetAllQuoteRes, error)
	CreateOffer(ctx context.Context, in *CreateOfferReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	GetAllOffers(ctx context.Context, in *GetAllOfferReq, opts ...grpc.CallOption) (*GetAllOfferRes, error)
	CreateOfferOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	UpdateOrderStatus(ctx context.Context, in *OrderStatusReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	GetAllRequest(ctx context.Context, in *GetAllRequestReq, opts ...grpc.CallOption) (*GetAllRequestRes, error)
	AcceptRequest(ctx context.Context, in *AcceptReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	RejectRequest(ctx context.Context, in *RejectReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	AdminOrderController(ctx context.Context, in *EmptyGigReq, opts ...grpc.CallOption) (*AdOrderController, error)
	AdOrderRefund(ctx context.Context, in *AdRefundReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	GetAllOrders(ctx context.Context, in *AllOrdersReq, opts ...grpc.CallOption) (*AllOrdersRes, error)
	GetOrderByID(ctx context.Context, in *OrderByIDReq, opts ...grpc.CallOption) (*OrderDetail, error)
	ClientStatutUpdate(ctx context.Context, in *OrderIDReq, opts ...grpc.CallOption) (*CommonGigRes, error)
	GetAllGig(ctx context.Context, in *GigReq, opts ...grpc.CallOption) (*GetAllGigRes, error)
	GetGigByID(ctx context.Context, in *GigIDreq, opts ...grpc.CallOption) (*GetGigRes, error)
}

type gigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGigServiceClient(cc grpc.ClientConnInterface) GigServiceClient {
	return &gigServiceClient{cc}
}

func (c *gigServiceClient) CreateGig(ctx context.Context, in *CreateGigReq, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, GigService_CreateGig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetGigsByFreelancerID(ctx context.Context, in *GetGigsByFreelancerIDRequest, opts ...grpc.CallOption) (*GetGigsByFreelancerIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGigsByFreelancerIDResponse)
	err := c.cc.Invoke(ctx, GigService_GetGigsByFreelancerID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) UpdateGigByID(ctx context.Context, in *UpdateGigRequest, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_UpdateGigByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) DeleteGigByID(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_DeleteGigByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetOrders(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderRes)
	err := c.cc.Invoke(ctx, GigService_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) RequestQuote(ctx context.Context, in *QuoteReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_RequestQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetAllQuotes(ctx context.Context, in *GetAllQuoteReq, opts ...grpc.CallOption) (*GetAllQuoteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllQuoteRes)
	err := c.cc.Invoke(ctx, GigService_GetAllQuotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) CreateOffer(ctx context.Context, in *CreateOfferReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_CreateOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetAllOffers(ctx context.Context, in *GetAllOfferReq, opts ...grpc.CallOption) (*GetAllOfferRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOfferRes)
	err := c.cc.Invoke(ctx, GigService_GetAllOffers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) CreateOfferOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_CreateOfferOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) UpdateOrderStatus(ctx context.Context, in *OrderStatusReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_UpdateOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetAllRequest(ctx context.Context, in *GetAllRequestReq, opts ...grpc.CallOption) (*GetAllRequestRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRequestRes)
	err := c.cc.Invoke(ctx, GigService_GetAllRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) AcceptRequest(ctx context.Context, in *AcceptReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_AcceptRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) RejectRequest(ctx context.Context, in *RejectReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_RejectRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) AdminOrderController(ctx context.Context, in *EmptyGigReq, opts ...grpc.CallOption) (*AdOrderController, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdOrderController)
	err := c.cc.Invoke(ctx, GigService_AdminOrderController_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) AdOrderRefund(ctx context.Context, in *AdRefundReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_AdOrderRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetAllOrders(ctx context.Context, in *AllOrdersReq, opts ...grpc.CallOption) (*AllOrdersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllOrdersRes)
	err := c.cc.Invoke(ctx, GigService_GetAllOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetOrderByID(ctx context.Context, in *OrderByIDReq, opts ...grpc.CallOption) (*OrderDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderDetail)
	err := c.cc.Invoke(ctx, GigService_GetOrderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) ClientStatutUpdate(ctx context.Context, in *OrderIDReq, opts ...grpc.CallOption) (*CommonGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonGigRes)
	err := c.cc.Invoke(ctx, GigService_ClientStatutUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetAllGig(ctx context.Context, in *GigReq, opts ...grpc.CallOption) (*GetAllGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllGigRes)
	err := c.cc.Invoke(ctx, GigService_GetAllGig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetGigByID(ctx context.Context, in *GigIDreq, opts ...grpc.CallOption) (*GetGigRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGigRes)
	err := c.cc.Invoke(ctx, GigService_GetGigByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GigServiceServer is the server API for GigService service.
// All implementations must embed UnimplementedGigServiceServer
// for forward compatibility.
type GigServiceServer interface {
	CreateGig(context.Context, *CreateGigReq) (*EmptyResponse, error)
	GetGigsByFreelancerID(context.Context, *GetGigsByFreelancerIDRequest) (*GetGigsByFreelancerIDResponse, error)
	UpdateGigByID(context.Context, *UpdateGigRequest) (*CommonGigRes, error)
	DeleteGigByID(context.Context, *DeleteReq) (*CommonGigRes, error)
	CreateOrder(context.Context, *CreateOrderReq) (*CommonGigRes, error)
	GetOrders(context.Context, *GetOrderReq) (*GetOrderRes, error)
	RequestQuote(context.Context, *QuoteReq) (*CommonGigRes, error)
	GetAllQuotes(context.Context, *GetAllQuoteReq) (*GetAllQuoteRes, error)
	CreateOffer(context.Context, *CreateOfferReq) (*CommonGigRes, error)
	GetAllOffers(context.Context, *GetAllOfferReq) (*GetAllOfferRes, error)
	CreateOfferOrder(context.Context, *CreateOrderReq) (*CommonGigRes, error)
	UpdateOrderStatus(context.Context, *OrderStatusReq) (*CommonGigRes, error)
	GetAllRequest(context.Context, *GetAllRequestReq) (*GetAllRequestRes, error)
	AcceptRequest(context.Context, *AcceptReq) (*CommonGigRes, error)
	RejectRequest(context.Context, *RejectReq) (*CommonGigRes, error)
	AdminOrderController(context.Context, *EmptyGigReq) (*AdOrderController, error)
	AdOrderRefund(context.Context, *AdRefundReq) (*CommonGigRes, error)
	GetAllOrders(context.Context, *AllOrdersReq) (*AllOrdersRes, error)
	GetOrderByID(context.Context, *OrderByIDReq) (*OrderDetail, error)
	ClientStatutUpdate(context.Context, *OrderIDReq) (*CommonGigRes, error)
	GetAllGig(context.Context, *GigReq) (*GetAllGigRes, error)
	GetGigByID(context.Context, *GigIDreq) (*GetGigRes, error)
	mustEmbedUnimplementedGigServiceServer()
}

// UnimplementedGigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGigServiceServer struct{}

func (UnimplementedGigServiceServer) CreateGig(context.Context, *CreateGigReq) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGig not implemented")
}
func (UnimplementedGigServiceServer) GetGigsByFreelancerID(context.Context, *GetGigsByFreelancerIDRequest) (*GetGigsByFreelancerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGigsByFreelancerID not implemented")
}
func (UnimplementedGigServiceServer) UpdateGigByID(context.Context, *UpdateGigRequest) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGigByID not implemented")
}
func (UnimplementedGigServiceServer) DeleteGigByID(context.Context, *DeleteReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGigByID not implemented")
}
func (UnimplementedGigServiceServer) CreateOrder(context.Context, *CreateOrderReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedGigServiceServer) GetOrders(context.Context, *GetOrderReq) (*GetOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedGigServiceServer) RequestQuote(context.Context, *QuoteReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestQuote not implemented")
}
func (UnimplementedGigServiceServer) GetAllQuotes(context.Context, *GetAllQuoteReq) (*GetAllQuoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuotes not implemented")
}
func (UnimplementedGigServiceServer) CreateOffer(context.Context, *CreateOfferReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffer not implemented")
}
func (UnimplementedGigServiceServer) GetAllOffers(context.Context, *GetAllOfferReq) (*GetAllOfferRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOffers not implemented")
}
func (UnimplementedGigServiceServer) CreateOfferOrder(context.Context, *CreateOrderReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOfferOrder not implemented")
}
func (UnimplementedGigServiceServer) UpdateOrderStatus(context.Context, *OrderStatusReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedGigServiceServer) GetAllRequest(context.Context, *GetAllRequestReq) (*GetAllRequestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRequest not implemented")
}
func (UnimplementedGigServiceServer) AcceptRequest(context.Context, *AcceptReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedGigServiceServer) RejectRequest(context.Context, *RejectReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectRequest not implemented")
}
func (UnimplementedGigServiceServer) AdminOrderController(context.Context, *EmptyGigReq) (*AdOrderController, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminOrderController not implemented")
}
func (UnimplementedGigServiceServer) AdOrderRefund(context.Context, *AdRefundReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdOrderRefund not implemented")
}
func (UnimplementedGigServiceServer) GetAllOrders(context.Context, *AllOrdersReq) (*AllOrdersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (UnimplementedGigServiceServer) GetOrderByID(context.Context, *OrderByIDReq) (*OrderDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedGigServiceServer) ClientStatutUpdate(context.Context, *OrderIDReq) (*CommonGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientStatutUpdate not implemented")
}
func (UnimplementedGigServiceServer) GetAllGig(context.Context, *GigReq) (*GetAllGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGig not implemented")
}
func (UnimplementedGigServiceServer) GetGigByID(context.Context, *GigIDreq) (*GetGigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGigByID not implemented")
}
func (UnimplementedGigServiceServer) mustEmbedUnimplementedGigServiceServer() {}
func (UnimplementedGigServiceServer) testEmbeddedByValue()                    {}

// UnsafeGigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GigServiceServer will
// result in compilation errors.
type UnsafeGigServiceServer interface {
	mustEmbedUnimplementedGigServiceServer()
}

func RegisterGigServiceServer(s grpc.ServiceRegistrar, srv GigServiceServer) {
	// If the following call pancis, it indicates UnimplementedGigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GigService_ServiceDesc, srv)
}

func _GigService_CreateGig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).CreateGig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_CreateGig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).CreateGig(ctx, req.(*CreateGigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetGigsByFreelancerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGigsByFreelancerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetGigsByFreelancerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetGigsByFreelancerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetGigsByFreelancerID(ctx, req.(*GetGigsByFreelancerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_UpdateGigByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).UpdateGigByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_UpdateGigByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).UpdateGigByID(ctx, req.(*UpdateGigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_DeleteGigByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).DeleteGigByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_DeleteGigByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).DeleteGigByID(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetOrders(ctx, req.(*GetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_RequestQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).RequestQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_RequestQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).RequestQuote(ctx, req.(*QuoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetAllQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQuoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetAllQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetAllQuotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetAllQuotes(ctx, req.(*GetAllQuoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_CreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).CreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_CreateOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).CreateOffer(ctx, req.(*CreateOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetAllOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetAllOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetAllOffers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetAllOffers(ctx, req.(*GetAllOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_CreateOfferOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).CreateOfferOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_CreateOfferOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).CreateOfferOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).UpdateOrderStatus(ctx, req.(*OrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetAllRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetAllRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetAllRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetAllRequest(ctx, req.(*GetAllRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_AcceptRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).AcceptRequest(ctx, req.(*AcceptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_RejectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).RejectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_RejectRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).RejectRequest(ctx, req.(*RejectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_AdminOrderController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyGigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).AdminOrderController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_AdminOrderController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).AdminOrderController(ctx, req.(*EmptyGigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_AdOrderRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).AdOrderRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_AdOrderRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).AdOrderRefund(ctx, req.(*AdRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetAllOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetAllOrders(ctx, req.(*AllOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetOrderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetOrderByID(ctx, req.(*OrderByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_ClientStatutUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).ClientStatutUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_ClientStatutUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).ClientStatutUpdate(ctx, req.(*OrderIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetAllGig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetAllGig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetAllGig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetAllGig(ctx, req.(*GigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetGigByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigIDreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetGigByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GigService_GetGigByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetGigByID(ctx, req.(*GigIDreq))
	}
	return interceptor(ctx, in, info, handler)
}

// GigService_ServiceDesc is the grpc.ServiceDesc for GigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gig.GigService",
	HandlerType: (*GigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGig",
			Handler:    _GigService_CreateGig_Handler,
		},
		{
			MethodName: "GetGigsByFreelancerID",
			Handler:    _GigService_GetGigsByFreelancerID_Handler,
		},
		{
			MethodName: "UpdateGigByID",
			Handler:    _GigService_UpdateGigByID_Handler,
		},
		{
			MethodName: "DeleteGigByID",
			Handler:    _GigService_DeleteGigByID_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _GigService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _GigService_GetOrders_Handler,
		},
		{
			MethodName: "RequestQuote",
			Handler:    _GigService_RequestQuote_Handler,
		},
		{
			MethodName: "GetAllQuotes",
			Handler:    _GigService_GetAllQuotes_Handler,
		},
		{
			MethodName: "CreateOffer",
			Handler:    _GigService_CreateOffer_Handler,
		},
		{
			MethodName: "GetAllOffers",
			Handler:    _GigService_GetAllOffers_Handler,
		},
		{
			MethodName: "CreateOfferOrder",
			Handler:    _GigService_CreateOfferOrder_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _GigService_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "GetAllRequest",
			Handler:    _GigService_GetAllRequest_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _GigService_AcceptRequest_Handler,
		},
		{
			MethodName: "RejectRequest",
			Handler:    _GigService_RejectRequest_Handler,
		},
		{
			MethodName: "AdminOrderController",
			Handler:    _GigService_AdminOrderController_Handler,
		},
		{
			MethodName: "AdOrderRefund",
			Handler:    _GigService_AdOrderRefund_Handler,
		},
		{
			MethodName: "GetAllOrders",
			Handler:    _GigService_GetAllOrders_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _GigService_GetOrderByID_Handler,
		},
		{
			MethodName: "ClientStatutUpdate",
			Handler:    _GigService_ClientStatutUpdate_Handler,
		},
		{
			MethodName: "GetAllGig",
			Handler:    _GigService_GetAllGig_Handler,
		},
		{
			MethodName: "GetGigByID",
			Handler:    _GigService_GetGigByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gig.proto",
}

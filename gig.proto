syntax = "proto3";

package gig;

option go_package ="./proto";

service GigService {
    rpc CreateGig(CreateGigReq) returns (EmptyResponse);
    rpc GetGigsByFreelancerID(GetGigsByFreelancerIDRequest) returns (GetGigsByFreelancerIDResponse);
    rpc UpdateGigByID(UpdateGigRequest) returns (CommonGigRes);
    rpc DeleteGigByID (DeleteReq) returns (CommonGigRes);
    rpc CreateOrder(CreateOrderReq) returns (CommonGigRes);
    rpc GetOrders(GetOrderReq)returns (GetOrderRes);
    rpc RequestQuote(QuoteReq) returns (CommonGigRes);
    rpc GetAllQuotes(GetAllQuoteReq) returns (GetAllQuoteRes);
    rpc CreateOffer(CreateOfferReq) returns (CommonGigRes);
    rpc GetAllOffers(GetAllOfferReq) returns (GetAllOfferRes);
    rpc CreateOfferOrder(CreateOrderReq) returns(CommonGigRes);
    rpc UpdateOrderStatus (OrderStatusReq) returns (CommonGigRes);
    rpc GetAllRequest(GetAllRequestReq) returns (GetAllRequestRes);
    rpc AcceptRequest(AcceptReq) returns (CommonGigRes);
    rpc RejectRequest(RejectReq) returns (CommonGigRes);
    rpc AdminOrderController (EmptyReq) returns (AdOrderController);
}

message AdOrderController{
    repeated Request gigs=1;
    repeated Request offer_gigs=2;
}

message EmptyReq{

}

message RejectReq{
    string order_id=1;
}

message AcceptReq{
    string order_id=1;
}

message GetAllRequestReq{
    uint64 user_id=1;
}

message GetAllRequestRes{
    repeated Request gigs=1;
    repeated Request offer_gigs=2;
}

message Request{
    string order_id=1;
    uint64 gig_id=2;
    uint64 clinet_id=3;
    uint64 freelancer_id=5;
    int64 amount=4;
}

message OrderStatusReq{
    string order_id=1;
    string status=2;
}

message GetAllOfferReq{
    uint64 client_id=1;
}

message GetAllOfferRes{
    repeated CreateOfferReq offers=1;
}

message CreateOfferReq{
    uint64 gig_request_id=1;
    uint64 freelancer_id=2;
    uint64 client_id=3;
    string title =4;
    string descripton=5;
    float price=6;
    int64 delivery_days=7;
}

message GetAllQuoteReq{
    uint32 user_id=1;
}

message GetAllQuoteRes{
    repeated Quote Quotes=1;
}

message Quote{
    uint64 gig_id =1;
    uint64 client_id=6;
    string describe =2;
    double price = 3;
    int64 delivery_days = 4;
    uint64 freelancer_id =7;
    repeated bytes images = 5;
}

message QuoteReq{
    uint64 gig_id =1;
    uint64 client_id=6;
    string describe =2;
    double price = 3;
    int64 delivery_days = 4;
    repeated bytes images = 5;
}

message GetOrderRes{
    repeated Order Orders =1;
}

message Order{
    string order_id =1;
    uint32 gig_id=2;
    uint32 freelancer_id=3;
    string payment_id=4;
    int64 amount=5;
}

message GetOrderReq{
    uint32 user_id=1;
}

message CreateOrderReq{
    uint32 clinet_id=1;
    uint32 gig_id=2;
}


message DeleteReq{
    uint32 gig_id=1;
    uint32 user_id=2;
}

message CommonGigRes{
    string message=1;
    int64 status =2;
    string error =3;
    map<string, AnyValues>data =4;
}

message AnyValues {
    oneof value {
      string string_value = 1;
      int32 int_value = 2;
      bool bool_value = 3;
      double double_value = 4;
    }
}

message UpdateGigRequest{
    uint64 id = 10;
    string title = 1;
    string description = 2;
    string category = 3;
    string type = 4;
    double price = 5;
    int64 delivery_days = 6;
    int64 number_of_revisions = 7;
    uint32 user_id = 8;
    repeated bytes images = 9; 
}

message GetGigsByFreelancerIDRequest {
    uint64 freelancer_id = 1;
}


message GetGigsByFreelancerIDResponse {
    repeated Gig gigs = 1;
}

message Gig {
    uint64 id = 1;
    string title = 2;
    string description = 3;
    string category = 4;
    uint64 freelancer_id = 5;
    float price = 6;
    int32 delivery_days = 7;
    int32 revisions = 8;
    repeated Image image = 9;
  }

message CreateGigReq{
    string title = 1;
    string description = 2;
    string category = 3;
    string type = 4;
    double price = 5;
    int64 delivery_days = 6;
    int64 number_of_revisions = 7;
    uint32 user_id = 8;
    repeated bytes images = 9; 
}

message Image{
    string url =1;
}

message EmptyResponse {

}
